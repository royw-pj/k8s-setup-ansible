---
- name: Get service facts
  service_facts: {}

- name: Firewall configuration
  when: 
  - ansible_facts is defined
  - "'firewalld.service' in ansible_facts.services"
  - ansible_facts.services['firewalld.service'].state == "running"
  firewalld:
    permanent: true
    immediate: true
    masquerade: true
    state: enabled
    port: "{{ item }}"
  with_items:
  - 6443/tcp
  - 2379/tcp
  - 2380/tcp
  - 10250/tcp
  - 10251/tcp
  - 10252/tcp

- name: install kubernetes
  include_role: 
    name: kubernetes/install

# - name: Set hostname
- name: Set hostname
  hostname:
    name: master-{{ groups['master'].index(inventory_hostname) }}-node

- name: Reset Kubernetes component
  shell: "kubeadm reset --force"
  register: reset_cluster
  become: true

- name: Init Kubernetes cluster
  when: reset_cluster is succeeded
  shell: "kubeadm init --pod-network-cidr {{ pod_network_cidr }} --apiserver-advertise-address {{ groups['master'][0] }}"
  register: init_cluster

- name: Create .kube directory
  file:
    path: /home/{{ ansible_env.SUDO_USER }}/.kube
    state: directory
    owner: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"
    group: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"
    mode: 0755
    
- name: Manage Cluster as Regular User
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_env.SUDO_USER }}/.kube/config"
    owner: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"
    group: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"
    mode: 0755
    remote_src: true

- name: Clear node taint
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"

- name: Set up Pod Network
  when: init_cluster is succeeded
  shell: "kubectl apply -f {{ pod_network_yaml | default('https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml') }}"
  environment: 
    KUBECONFIG: /etc/kubernetes/admin.conf
